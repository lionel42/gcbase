// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
    type?: ItemType;
    status?: ItemStatus;
};

export type ItemLogsPublic = {
    item_id: string;
    logs: Array<LogPublic>;
    count: number;
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    type?: ItemType;
    status?: ItemStatus;
    id: string;
    location_id: (string | null);
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemStatus = 'available' | 'in_use' | 'maintenance' | 'lost' | 'discarded';

export type ItemType = 'flask' | 'pump' | 'computer' | 'other';

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
    type?: ItemType;
    status?: ItemStatus;
    location_id: (string | null);
};

export type Location = {
    name: string;
    description?: (string | null);
    id?: string;
};

export type LocationCreate = {
    name: string;
    description?: (string | null);
};

export type LocationsPublic = {
    locations: {
        [key: string]: (string);
    };
};

export type LogCreate = {
    message: string;
    date?: string;
    item_id: string;
};

export type LogPublic = {
    message: string;
    date?: string;
    id: string;
    operator_name: (string | null);
    item_id: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type ItemsMoveItemData = {
    itemId: string;
    newLocation: (string | null);
};

export type ItemsMoveItemResponse = (Location);

export type ItemsReadItemLogsData = {
    itemId: string;
};

export type ItemsReadItemLogsResponse = (ItemLogsPublic);

export type ItemsCreateItemLogData = {
    requestBody: LogCreate;
};

export type ItemsCreateItemLogResponse = (LogPublic);

export type ItemsGetTypesResponse = (Array<(string)>);

export type LocationsReadLocationsResponse = (LocationsPublic);

export type LocationsCreateLocationData = {
    requestBody: LocationCreate;
};

export type LocationsCreateLocationResponse = (Location);

export type LocationsReadLocationData = {
    id: string;
};

export type LocationsReadLocationResponse = (Location);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);